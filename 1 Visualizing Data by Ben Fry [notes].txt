vitaly bulgarov - Black phoenix
http://benfry.com/writing/archives/3
Tacit Knowledge
.

Preface
		Computational Information Design
		Chapter 1-4 can be understood by someone without any programming background.	
		www.benfry.com/writing

1 The Seven Stages of Visualizing Data	:: covers the process from developing a useful viz, from acquiring data to interacting with it.
		- Great viz never starts from the standpoint of the data set; it starts with ques.
		- Why was the data collected, 
		- what's interesting about it, and 
		- what stroies can it tell?

		- The more specific you can make your question, the more specific and clear the visual result will be.
		- In short, a proper viz is a king of narrative, providing a clear answer to a ques without extraneous details.
		- Understanding Data
				- Acquire	- Parse - Filter - Mine - Represent - Refine - Interact 
			- These steps can't be followed slavishly. Sometimes it will be 4 out of 7, & other all of them.

	Principles
		Each Project Has Unique Requirement
				- Every problem is unique, so capitalize on that uniqueness to solve the problem.
		Avoid the All-You-Can-Eat Buffet
				- less details will actually convey more information 
				- Just because it can be measured doesn't mean it should.
				- Perhaps making things simple is worth bragging about, but making complex messes is not.
				- Find the smallest amount of data that can still convey something meaningful about the contents of the data set.
		Know Your Audience 
				- In what way will your audience use the piece?
		
		We will tackle the problems of having too much data & having data that can change.

--- .....................................
Chapter 2 Getting Started with Processing   19 - 30
		- Exporting and Distributing Your Work
			- File --> Export
			- saveFrame("output-####.png");  //saving Images
		- Examples and Refrence
			- More About the size() Method

		- Functions
		- Sketching and Scripting 
		- Ready?

			- We'll cover how to integrate Java and Processing toward the end of the book.
			- The language syntax, identical to Java but with a few modifications. The changes are laid out in detail toward the end of the book.
							Tip
								- Use External Editor in the Pref
			- size(400,400, JAVA2D);  //default
			- size(400, 400, P2D);
			- size(400, 400, P3D);
			- size(400, 400, OPENGL); 	
				:: uses SUn's Java OpenGL lib for faster rednering
				:: import library --> OpenGL 
			- size(400, 400, PDF, "filename-####.pdf");
				:: import the PDF lib
				:: cousin of the Java2D renderer
						- P2D and P3D are great for pixel-based work, while JAVA2D and PDF settings will give you the highest quality. 
		- Loading and Displaying Data
			- loadImage() and loadStrings() functions each xpect to find a file inside a folder named data, which is a subdir of the sketch folder
			- loadStrings() reads a text file into an array of String objects, and
			- loadImage() reads an image into a PImage object, the container for image data in Processing. Code Example
				- String[] lines = loadStrings("something.txt");
				- PImage[] img = loadImage("picture.jpg");
			- Sketch --> Show sketch folder  ::view the contents of the sketch folder
				>> String[] lines = loadStrings("http://benfry.com/writing/map/locations.tsv") ;	//also use full path names to local files. or URL
				>> String[] lines = loadStrings ("https://raw.githubusercontent.com/ddtriaankur/processing-sketches/master/notes.txt");

				>> PImage image = loadImage("http://benfry,com/writing/map.png");

		Functions	
			- Acquire
					loadStrings(), loadBytes() 
			- Parse
					split()
			- Filter
					for(), if (item[i].startsWith())
			- Mine
					min(), max(), abs()
			- Represent
					map(), beginShape(), endShape()
			- Refine
					fill(), strokeWeight(), smooth()
			- Interact
					mouseMoved(), mouseDragged(), keyPressed()

		Libraries Add New Features
			- import processing.xml.*;
				- XMLElement xml = new XMLElement(this, "sites.xml") ;
			- The "this" object is used because it lets the library make use of the core API functions to draw to the screen or load files.
		Don't Start by Trying to Build a Cathedral
			- Of course, once things are working, avoid the urge to rewrite for its own sake.
			- A rewrite should be used when addressing a completely different problem.

--- .....................................
Chapter 3 Mapping		31 - 53 Pg
			Drawing a Map
				- US Map :: http://benfry.com/writing/map/map.png
				- loadImage("map.png");
			Locations on a Map
					- File containing the coordinates for the center of each state - 
							http://benfry.com/writing/map/locations.tsv
					- Code to read the location data file 
							http://benfry.com/writing/map/Table.pde
					- Table class reads a file as a grid of rows and columns.
							table.getFloat(row, column);
			Data on a Map
				- Random Data - http://benfry.com/writing/map/random.tsv
				- Minimum & Maximum values for the data is important because that range will need to be mapped to other features (such as size or color) for display.
				- Using 0 instead of MIN_FLOAT and MAX_FLOAT where the values are negative
				- The norm() function maps values from a user-specified range to a normalized range between 0.0 and 1.0
				- The percentage value is a percentage of where value lies in the range from dataMin to dataMax.
					>> float percentage = norm(value, dataMin, dataMax);
				- the lerp() function converts a normalized
					- norm() & lerp() together make up the map() funciton 
					- lerpColor() function interpolates between two colors.
						>> color between = lerpColor (color1, color2, percentage);  
				- To make the colors interpolate between red and blue for low and high values, 
						>> color between = lerpColor(#296F34, #61E2F0, percentage);
						>> fill(between);
				- This illustrates the problem with interpolating between two inrelated colros.
				- Use HSB to preserve the saturation & brightness of colors, 
						>> color between = lerpColor(#296F34, #61E2F0, percent, HSB);
			Two Sided Data Ranges				
				- use separate colors for positive or negative 
				- Positive value are remapped from 0 through the max value into a value between 3 to 30 for the diameter of the ellipse.
				- Positive values are drawn with blue ellipses and negatives with red
			Provide More Information with a Mouse Rollover (Interact)	
				- include the font file in the data folder
					>> PFont font = loadFont("filename.fnt") ;
					>> textFont(font);
				- loadFont() should be used only inside setup() 
				- use dist() function to calc if its within the radius
				- ellipseMode(RADIUS) cause default ellipseMode is DIAMETER
				- Additional file to the full state name 
					- http://benfry.com/writing/map/names.tsv
				- Table nameTable; 
				- nameTable = new Table("names.tsv");
			Updating Values over Time (Acquire, Mine)
				- One problem with changing data is that the min and max values need to stay fixed. You will need to figure out the absolute values for each because recalculating dataMin and dataMax each time 
				- setFloat() overwrites the old value from the data table with the new random value.
				- nf() is used to format numbers for printings
				- nf(value, 0, 2)  	//allow any number of digits to the left of the decimal and two to the right
				- the name for nf() is intentionally terse (if a bit cryptic)
				- nfp() requires each number to be shaown with a + or - sign
					- “North Dakota 6.15234534” into “North Dakota +6.15”, which is far more readable
				- nfs() pads values with spaces
			Smooth Interpolation of Values over Time (Refine)
				- updating data, showing users the transition over time 
				- Interpolating between values 
				- Your data value never "equal" to some number, rather they're always "becoming" or "transitioning to" another value.
 				- Integrator class is used for this.
					- http://benfry.com/writing/map/Integrator.pde
				- Integrator changingNumber = new Integrator(4);
				- changinNumber.target(-2);
				- Call the update() method to see the change
					- changingNumber.update();
				- The integrator has a value field that always holds its current value.
					- strokeWeight(changingNumber.value); 
				- Integrator[] interpolators; 	//array of object
					- rowCount = locationTable.getRowCount();		//get the array size
			//Setup: load init values into the Integrator
						- interpolators = new Integrator[rowCount];  //define array size
						- for (){
								initVal = dataTable.getFloat(i,1)
								interpolators[i] = new Integrator(initVal); 
							}
				- interpolators[i].target(newValue);
				- frameRate(30);
				- As integrator class uses math for simple physics. 
				- The target value is the resting length of the spring.
				- Default dampning is 0.5 and the attraction is 0.2 
				- interpolators[i] = new Integrator(intiVal, 0.9, 0.1); 	//low dampning makes it bouncy
		Using Your Own Data Pg 51
					- replace random.tsv to use your own file 
				- Taking Data from the User 
					
		NEXT STEPS- 
					- we learned the basics of reading, displaying and interacting with a data set.
					- Follow chapters delve into more sophisticated aspects of each,
					- buil on the basic skill picked up here.

Need to GIVE chapter 2 another revision

Chapter 4 Time Series
				- Time Series hlep to measure feature over a period of time
			We cover
							- Acquiring data from a text file
							- Parsing contents of the file into a usable structure
							- Calculating boundaries of the data
							- Finding a suitable representation and consideration alternatives
							- Refining the representation  
							- Interactivity with the data 
			Milk, Tea & Coffee - Acquire and Parse		
					- Modified version of Table class is used to read this file::
							- http://benfry.com/writing/series/FloatTable.pde 
			Clearing the Table - Filter & Mine				
					- FloatTable class has methods for calculating min and max for the rows and columns 
						>> FloatTable data = new FloatTable("filename.tsv");
						:: getColumnMax :: getColumnMin
					- isValid() //only consider valid data elements 
					- getRowNames() method returns a String array 
					- int() converts String into int 
						- years = int(data.getRowNames());
			A Simple Plot - Represent and Refine 				pg 56
					- set Boundaries, defines the corners of the plot
						:: plotX1, plotY1, plotX2 & plotY2
					- rectMode(CORNERS); 
					- float x = map(row, 0, rowCount-1, plotX1, plotX2)
			Labeling the Current Data Set 	//Refing and Interact
					-> createFont("SansSerif", 20);  	
							//bulit in type face Serif, SansSerif, Monospaced, Dialog and DialogInput
					-> textFont(plotFont);
					-> createFont() is smooth at any size unlike font used with loadFont() which may be distorted
						- ttf otf are supports formats
					- PFont.list(); 
							//lists installed fonts on your system
			Drawing Axis Labels //Refine	
					- General rule of thumb for porper interval 
							:: 5 intervals is at low end & more than 10 is likely a problem
				Year Labels
					- add the yearInterval variable
						-> int yearInterval = 10
					- Use modulo % to divide year in equal parts  
					- textAlign(); 		
							//sets the vertical alignment of the text
							//TOP, BOTTOM, CENTER and BASELINE(the default)
				Labeling Volume on the Vertical Axis	
					- int volumeInterval = 10;
					- ceil() 		//rounds a float up to the next int value
					- set dataMax to the rounded value multiplied by volumeInterval
							:: dataMax = ceil(data.getTableMax()/volumeInterval) * volumeInterval;
					- floor() 			//floors the decimal values
					- text() method can draw int or float values
					- use nf() method if decimal points is need to be included
					- str() converts float to a string  //oppo of int()
							:: String.valueOf() in JAVA
				Bringing it All Together & Tilting Both Axes
					- textAlign(CENTER, CENTER)
					- textWidth() 		//textAscent()
				Choosing a Proper Representation //Represent & Refine
					- beginShape() 		//endShape(CLOSE)
						- vertex() 			//method adds points to the shape
						- curveVertex() //can be used with ::curveTightness()
				Using Rollovers to Hightlight Points //Interact
					- highligh points when the mouse is nearby
				Ways to Connect Points (Refine)   Pg 77
					- curveVertex() atleast four points are necessary 
						- because the first and last coordinates() are used to guide the angle at which the curve begins and ends
			Text Labels As Tabbed Panes (Interact)
					- 
					- ***********************************************************
				Drawing Tabs Instead of a Single Title	
					- 
				Handling Mouse Input
					- 
				Better Tab Images (Refine)	
					- 

			Interpolation Between Data Sets (Interact)		
					- chapter 3 used Integrator class to interpolate b/w values in a data set. 
					- First, declare the array of Integrator objects beforesetup()
							- Integrator[] interpolators;
					- Inside setup(), create each Integrator and set its initial value:
							- interpolators = new Integrator[rowCount]; //initiated
							- //assigned
					- In draw(), each Integrator is uploaded:
							- for( int row=0; row <rowCount; row++){
									interpolators[row].update();
								}
					- replace data.getFloat(row, col) with::
							- float value = interpolators[row].value ;
					- finally set each Integrator to target the value
							- interpolators[row].target(data.getFloat(row, col) );
			End of the Series 
				- Processing or Java Devs might want to make this code into a class name TimeSeries
				- Classes are useful means for encapsulating data sets.
				- This book is intends to teach you the starting point for drawing basic representations, and then goes on to show how they can be manipulated in a more sphisticated manner than can be done with standard tools.


Chapter	6. Scatterplot Maps// 					145 - 180 Pg
				Preprocessing
				Loading the Data 	//Acquire & Parse
				Drawing a Scaterplot of Zip Codes 	//Mine & Represent
				Highlighting Points While Typing 		//Refine & Interact
				Show the Currently Selected Point 	//Refine
				Progressively Dimming and Brightening Points 	//Refine
				Zoomin In 		//Interact 
				Changing How Points Are Drwan When Zooming 		//Refine
				Deployment Issues 		//Acquire & Refine
				Next Steps

Chapter	8. Networks and Graphs	
						- a graph is a collection of elements, usually called nodes,
						- linked together by edges(sometimes called braches)		
						- common structure for mapping connections of many related elements
				Simple Graph Demo
					- use expand() instead of Java's ArrayList or Vector classes because
						- arrays are more runtime speed-efficient
						- this is imp for dealing with thousands of nodes
					- The relax() methods calculate the placement of each node & lengths for each edge
					- Handled by a kind of toy physics simulation, known as force-directed layout
					- In a force-directed layout	
						- edges act like springs that have a target length //also called their rest length
					- The process applying the forces is called relaxation
				Interacting with Nodes
					- **************************************************** 
					- 
					- mag() function
							- The magnitude of the vector is the disctance between the coordinate(0,0) and the vector's (x,y) coordinates.
							- mag() is equivalent to dist(0, 0, x, y), //mag is more efficient
							- relax() method compares this node against all the others to make sure none are too close to one another
								- If they are,a slight offset (dx and dy) is added
							- update() method updates the node positions by constraining dx and dy so that they don't exceed five pixels in either direction and then adding that value to x and y 
							- The x and y coords are also constrained to make sure they stay within the drawing area:
				A More Complicated Graph 						229
						- Acquire
						- Parse
							- splitTokens() method is usefull for splitting a String along one of many delimiters
							- split() method makes a break whenever a delimiter is seen,
								- it is useful when breaking up fixed-width data 
							- whereas splitTokens() is helpful when dealing with a messier range of delimiters
						- Filter
							->> return; 			//will end the function
						- MINE 
							- 
						- Represent & Refine
							- title of the nodes will be visible whenever the text is large enough to fit
						- Saving an Image in a Vector Format
							- if(key = 'r')
							- only the command after beginRecord() are echoed to the file, non of the settings will be inherited
							- see refrences/libraries for examples that handle writing SVG format and others
						- Checking Our Work     238 Pg
				Approaching Networking Problems 		240
							- Graphs have a tendency of amking a data set look sophisticateed and important, without having solved the problem of enlighting the viewer.
						Some techniques for coping with graph data	
								- Always return to your original question
								- Consider the representation. What is the minimum amount of information that can be used to convey your purpose?
								- What's interesting about the data?
								- Try multiple diagrams
								- Figure out how to group the information.
								- Introduce hierarchy to avoid a sea of anonymous data.
								- Is the information time based? 
								- Even without clustering, interaction can be used to allow the user to explore the data.
						Consider the Six Degrees of Kevin Bacon game			
						The Oracle of Bacon -> oracleofbacon.org
				Advanced Graph Example 							242 ********************** this
					Obtaining a Web Server LogFile  //Acquire
					Reading Apache Logfiles 	//Parse
					A Look at the Other Source Files					
					Moving from Processing to Java **
					Reading and Cleaning the Data 	//Acquire, Parse, Filter
					Bringing It All Together 	//Mine and Represent
					Depicting Branches and Nodes 		//Represent and Refine
					Playing with Data 		//Interact
					Drawing Node Names 		//Represent and Refine
					Drawing Visitor Paths 	//Represent and Refine
				Mining Additional Information 			262

Chapter 5. Connections and Correlations				94 - 133 Pg
				Changing Data Sources
				Problem Statement
				Preprocessing
				Using the Preprocessed Data(Acquire, Parse, Filter, Mine)
				Displaying the Results(Represent)
				Returning to the Question(Refine)
				Sophisticated Sorting: Using Salary As a Tiebreaker(Mine)
				Moving to Multiple Days(Interact)
				Smoothing Out the Interaction(Refine)
				Deployment Considerations(Acquire, Parse, Filter)

Chapter	7. Trees, Hierarchies and Recursion
				Using Recursion to Build a Directory Tree
				Using a Queue to Load Asynchronously(Interact)
				An Introduciton to Treemaps
				Which Files Are Using the Most Space?
				Viewing Folder Contents(Interact)
				Improving the Treemap Display(Refine)
				Flying Through Files(Interact)
				Next Steps


Chapter	9. Acquiring Data
				Where to Find Data 		//Pg 265 
				Tools for Acquiring Data from the Internet
					Wget and cURL
					NcFTP and Links
				Location Files for Use with Processing 		//Pg 268
					The Data Folder
					URL
					Absolute Path to a Local File
					Specifying Output Locations
				Loading Text Data 		//Pg 270
					Files Too Large for loadStrings()
					Reading Files Progressively 
						- BufferedReader : to read a few lines on each iteration through the draw() method
					>> BufferReader reader;
						reader = createReader("xyz.log");
							String line = reader.readLine();
						- on each trip through draw(), a new line is read, and the readLine() method will return null if the file is finished 	
		[NOTE]Reading Files Asynchronously with a Thread	
					Parsing Large Files As They Are Acquired
				Dealing with Files and Folders
					Using the Java File Object to Locate Files
				Listing Files in a Folder
				Asynchronus Image Downloads			//Pg 280
					- like the other file loading functions, loadImage() halts execution until it has completed
					- loading images inside setup can negatively impact startup time for a sketch
					- we can instead rely on Java methods for retrieving the image data.
						:: the ImageLoader class is designed to handle this situation
						example	code :: ImageLoader.java
						>> 	ImageLoader loader;
								loader = new ImageLoader();
								String path = dataPath(name);
								imageList[i] = loader.addFile(path);
						- that would queue all 104 images to be loaded and then set them to download.		
						- This makes for a more efficient download through the use of threading, but doesn't solve the startup problem
								import java.awt.*; 
								import java.awt.image.*; 
								import java.net.URL; 
								import processing.core.*;
						- The ImageLoader class provides basic functions for creating images in the PImage structure required by Processing.
						- Once the image download is complete, the finish() method copies the image data from the Java Image objects to the PImage objects.
						- That is handled inside PImage because attributes such as width and height wont't be available until the download is complete.
						- The ImageLoader methods for creating images just wrap standard Java classes within PImage classes so Processing can use the images. 
				Using openStream() As a Bridge to Java 
				Dealing with Byte Arrays
				Advanced Web Techniques
				Using a Database
					Performance Aspects of Databases in Interactive Applications
				Dealing with a Large Number of Files

Chapter	10. Parsing Data
						- generally data boils down to lists 1-D, matrices 2D, or trees and graphs
				Levels of Effort 		Pg 296
					Batik SVG Parser
					Anecdote****
						- In short the perception of ugliness can often lead to nonessential tasks that take you down long, unproductive paths and lead you astray from the priorities of your project.
				Tools for Gathering Clues
				Text Is Best
					TSV //Tab Separated Values 
					CSV //Comma Separated Values
				Text Markup Languages
					HTML
					XML
					JSON 	Pg 315
				Regular Expressions
				Grammars and BNF Notation
				Compressed Data
				Vectors and Geometry
					SVG 	Pg 320
					OBJ and AutoCAD DXF	
				Binary Data Formats
					XLS Excel Spreadsheets
				Advanced Detective Work

Chapter 11. Integrating Processing with Java
				Programming Modes
				Additional Source Files(Tabs)
				The Preprocesor
				API Structure
				Embedding PApplet into Java Applications
				Using Java Code in a Processing Sketch
				Using Libraries
				Building with the Source for processing.core
