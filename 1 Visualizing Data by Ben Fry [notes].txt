vitaly bulgarov - Black phoenix

11 Days 

1 DAY --
11 Chapters   	Pg 343

Preface
		Computational Information Design
		Chapter 1-4 can be understood by someone without any programming background.	
		www.benfry.com/writing

1 The Seven Stages of Visualizing Data	:: covers the process from developing a useful viz, from acquiring data to interacting with it.
		- Great viz never starts from the standpoint of the data set; it starts with ques.
		- Why was the data collected, 
		- what's interesting about it, and 
		- what stroies can it tell?

		- The more specific you can make your question, the more specific and clear the visual result will be.
		- In short, a proper viz is a king of narrative, providing a clear answer to a ques without extraneous details.
		- Understanding Data
				- Acquire	- Parse - Filter - Mine - Represent - Refine - Interact 
			- These steps can't be followed slavishly. Sometimes it will be 4 out of 7, & other all of them.

	Principles
		Each Project Has Unique Requirement
				- Every problem is unique, so capitalize on that uniqueness to solve the problem.
		Avoid the All-You-Can-Eat Buffet
				- less details will actually convey more information 
				- Just because it can be measured doesn't mean it should.
				- Perhaps making things simple is worth bragging about, but making complex messes is not.
				- Find the smallest amount of data that can still convey something meaningful about the contents of the data set.
		Know Your Audience 
				- In what way will your audience use the piece?
		
		We will tackle the problems of having too much data & having data that can change.

--- .....................................
Chapter 2 Getting Started with Processing   19 - 30
		- Exporting and Distributing Your Work
			- File --> Export
			- saveFrame("output-####.png");  //saving Images
		- Examples and Refrence
			- More About the size() Method

		- Functions
		- Sketching and Scripting 
		- Ready?

			- We'll cover how to integrate Java and Processing toward the end of the book.
			- The language syntax, identical to Java but with a few modifications. The changes are laid out in detail toward the end of the book.
							Tip
								- Use External Editor in the Pref
			- size(400,400, JAVA2D);  //default
			- size(400, 400, P2D);
			- size(400, 400, P3D);
			- size(400, 400, OPENGL); 	
				:: uses SUn's Java OpenGL lib for faster rednering
				:: import library --> OpenGL 
			- size(400, 400, PDF, "filename-####.pdf");
				:: import the PDF lib
				:: cousin of the Java2D renderer
						- P2D and P3D are great for pixel-based work, while JAVA2D and PDF settings will give you the highest quality. 
		- Loading and Displaying Data
			- loadImage() and loadStrings() functions each xpect to find a file inside a folder named data, which is a subdir of the sketch folder
			- loadStrings() reads a text file into an array of String objects, and
			- loadImage() reads an image into a PImage object, the container for image data in Processing. Code Example
				- String[] lines = loadStrings("something.txt");
				- PImage[] img = loadImage("picture.jpg");
			- Sketch --> Show sketch folder  ::view the contents of the sketch folder
				>> String[] lines = loadStrings("http://benfry.com/writing/map/locations.tsv") ;	//also use full path names to local files. or URL
				>> String[] lines = loadStrings ("https://raw.githubusercontent.com/ddtriaankur/processing-sketches/master/notes.txt");

				>> PImage image = loadImage("http://benfry,com/writing/map.png");

		Functions	
			- Acquire
					loadStrings(), loadBytes() 
			- Parse
					split()
			- Filter
					for(), if (item[i].startsWith())
			- Mine
					min(), max(), abs()
			- Represent
					map(), beginShape(), endShape()
			- Refine
					fill(), strokeWeight(), smooth()
			- Interact
					mouseMoved(), mouseDragged(), keyPressed()

		Libraries Add New Features
			- import processing.xml.*;
				- XMLElement xml = new XMLElement(this, "sites.xml") ;
			- The "this" object is used because it lets the library make use of the core API functions to draw to the screen or load files.
		Don't Start by Trying to Build a Cathedral
			- Of course, once things are working, avoid the urge to rewrite for its own sake.
			- A rewrite should be used when addressing a completely different problem.

--- .....................................
Day 2 
Chapter 3 Mapping		31 - 53 Pg
			Drawing a Map
				- US Map :: http://benfry.com/writing/map/map.png
				- loadImage("map.png");
			Locations on a Map
					- File containing the coordinates for the center of each state - 
							http://benfry.com/writing/map/locations.tsv
					- Code to read the location data file 
							http://benfry.com/writing/map/Table.pde
					- Table class reads a file as a grid of rows and columns.
							table.getFloat(row, column);
			Data on a Map
				- Random Data - http://benfry.com/writing/map/random.tsv
				- Minimum & Maximum values for the data is important because that range will need to be mapped to other features (such as size or color) for display.
				- Using 0 instead of MIN_FLOAT and MAX_FLOAT where the values are negative
				- The norm() function maps values from a user-specified range to a normalized range between 0.0 and 1.0
				- The percentage value is a percentage of where value lies in the range from dataMin to dataMax.
					>> float percentage = norm(value, dataMin, dataMax);
				- the lerp() function converts a normalized
					- norm() & lerp() together make up the map() funciton 
					- lerpColor() function interpolates between two colors.
						>> color between = lerpColor (color1, color2, percentage);  
				- To make the colors interpolate between red and blue for low and high values, 
						>> color between = lerpColor(#296F34, #61E2F0, percentage);
						>> fill(between);
				- This illustrates the problem with interpolating between two inrelated colros.
				- Use HSB to preserve the saturation & brightness of colors, 
						>> color between = lerpColor(#296F34, #61E2F0, percent, HSB);
			Two Sided Data Ranges				
				- use separate colors for positive or negative 
				- Positive value are remapped from 0 through the max value into a value between 3 to 30 for the diameter of the ellipse.
				- Positive values are drawn with blue ellipses and negatives with red
			Provide More Information with a Mouse Rollover (Interact)	
				- include the font file in the data folder
					>> PFont font = loadFont("filename.fnt") ;
					>> textFont(font);
				- loadFont() should be used only inside setup() 
				- use dist() function to calc if its within the radius
				- ellipseMode(RADIUS) cause default ellipseMode is DIAMETER
				- Additional file to the full state name 
					- http://benfry.com/writing/map/names.tsv
				- Table nameTable; 
				- nameTable = new Table("names.tsv");
			Updating Values over Time (Acquire, Mine)
				- One problem with changing data is that the min and max values need to stay fixed. You will need to figure out the absolute values for each because recalculating dataMin and dataMax each time 
				- setFloat() overwrites the old value from the data table with the new random value.
				- nf() is used to format numbers for printings
				- nf(value, 0, 2)  	//allow any number of digits to the left of the decimal and two to the right
				- the name for nf() is intentionally terse (if a bit cryptic)
				- nfp() requires each number to be shaown with a + or - sign
					- “North Dakota 6.15234534” into “North Dakota +6.15”, which is far more readable
				- nfs() pads values with spaces
			Smooth Interpolation of Values over Time (Refine)
				- updating data, showing users the transition over time 
				- Interpolating between values 
				- Your data value never "equal" to some number, rather they're always "becoming" or "transitioning to" another value.
 				- Integrator class is used for this.
					- http://benfry.com/writing/map/Integrator.pde
				- Integrator changingNumber = new Integrator(4);
				- changinNumber.target(-2);
				- Call the update() method to see the change
					- changingNumber.update();
				- The integrator has a value field that always holds its current value.
					- strokeWeight(changingNumber.value); 
				- Integrator[] interpolators; 	//array of object
					- rowCount = locationTable.getRowCount();		//get the array size
			//Setup: load init values into the Integrator
						- interpolators = new Integrator[rowCount];  //define array size
						- for (){
								initVal = dataTable.getFloat(i,1)
								interpolators[i] = new Integrator(initVal); 
							}
				- interpolators[i].target(newValue);
				- frameRate(30);
				- As integrator class uses math for simple physics. 
				- The target value is the resting length of the spring.
				- Default dampning is 0.5 and the attraction is 0.2 
				- interpolators[i] = new Integrator(intiVal, 0.9, 0.1); 	//low dampning makes it bouncy
		Using Your Own Data Pg 51
					- replace random.tsv to use your own file 
				- Taking Data from the User 
					
		NEXT STEPS- 
					- we learned the basics of reading, displaying and interacting with a data set.
					- Follow chapters delve into more sophisticated aspects of each,
					- buil on the basic skill picked up here.

Need to GiVe chapter 2 another revision